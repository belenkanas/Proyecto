<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibraryTests</name>
    </assembly>
    <members>
        <member name="M:Tests.JugadorPrincipalTest.ElegirPokemonDelCatalogo_IndiceValido">
            <summary>
            Este test del método ElegirPokemonDelCatalogo() verifica que cuando se elige un pokémon del catálogo a través
            de su índice, devuelva el pokémon esperado ya que su índice es válido.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.ElegirPokemonDelCatalogo_IndiceNegativo">
            <summary>
            Este test verifica que al ingresar un índice fuera del rango esperado para elegir tu pokémon, devuelva null.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.ElegirPokemonDelEquipo_IndiceValido">
            <summary>
            Verifica que el jugador pueda elegir el pokémon que quiera de su equipo por el índice
            en este caso, el índice es válido y devuelve el pokémon elegido.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.ElegirPokemonDelEquipo_IndiceInvalido">
            <summary>
            En este caso, el índice está fuera del rango permitido entonces devolverá null.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.MostrarTurnoJugador">
            <summary>
            Muestra el turno actual del jugador.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.MostrarAtaquesDisponibles_IndiceValido">
            <summary>
            Verifica que muestre correctamente los ataques disponibles del pokémon elegido por su índice para la batalla
            En este caso, el índice es válido, entonces devuelve una lista de ataques disponibles para ese pokémon.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.MostrarAtaquesDisponibles_IndiceInvalido">
            <summary>
            Para este caso, el índice del pokémon elegido es inválido y devuelve el mensaje de error.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.MostrarEquipoConPokemonsValido">
            <summary>
            Verifica que muestre todos los pokémones seleccionados para formar el equipo de 6 a través de su índice.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.MostrarEquipoConPokemonsInvalido">
            <summary>
            Para este caso, no hay pokémones en el equipo entonces devuelve null.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.PokemonesDerrotados_TodosSinVida">
            <summary>
            En este test, se prueba que todos los pokémones del equipo tienen su vida en 0/100 entonces el método
            PokemonesDerrotados() devuelve true y se termina la batalla asumiendo de ganador el jugador oponente.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.PokemonesDerrotados_AlMenosUnoConVida">
            <summary>
            Si al menos uno de los pokémones del equipo tiene su vida > 0, devuelve false que significa que la batalla sigue. 
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.CambiarPokemonBatalla_IndiceValidoYPokemonNoActual">
            <summary>
            Esta prueba, verifica que, al querer cambiar de pokémon en una batalla, el índice ingresado sea válido
            (que no sea el del pokémon que está en batalla y que esté dentro del rango). También verifica que el jugador
            utilizó su turno haciendo el cambio.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.CambiarPokemonBatalla_IndiceValidoYPokemonActual">
            <summary>
            En este caso, el jugador ingresa el índice del pokémon que está actualmente en la batalla entonces devolverá un
            mensaje de que deberá ingresar otro índice.
            </summary>
        </member>
        <member name="M:Tests.JugadorPrincipalTest.CambiarPokemonBatalla_IndiceInvalido">
            <summary>
            Y para este caso, el índice ingresado está fuera de rango entonces devolverá un mensaje comentando que el
            índice del pokémon es inválido.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.UsarAtaque_IndiceInvalido">
            <summary>
            Este test, verifica que al utilizar el método UsarAtaque(), el índice ingresado del ataque que se quiere
            utilizar sea válido. En este caso, es negtivo entonces está fuera de rango, y devuelve un mensaje diciendo que
            ese ataque no es válido.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.UsarAtaque_CalculoDeDañoConPonderador">
            <summary>
            Para este caso, el índice es válido y el ataque es especial entonces verificamos que se calcule el daño esperado
            utilizando el ponderador.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.UsarAtaque_AtaqueEspecialNoDisponible">
            <summary>
            Este caso, verifica que para este turno los ataques especiales no están disponibles.
            Devuelve un mensaje mencionándolo.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.UsarAtaque_AtaqueEspecialCalulcaDaño">
            <summary>
            Y en este caso, el índice es válido pero el ataque no es especial entonces no utiliza el ponderador pero
            calcula el daño igualmente.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.RecibirDaño">
            <summary>
            Este test, verifica el método RecibirDaño()
            Primero, comprueba que el pokémon no sea derrotado si su vida actual es mayor a 0 después de recibir el daño.
            También, comprueba que al aplicar un ataque su vida disminuye a 0 y el estado del pokémon pasa a ser Derrotado.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.MostrarVida_Formato">
            <summary>
            Este test verifica que muestre la vida en el formato pedido.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.AgregaAtaquesDelMismoTipoDePokemon_AgregandoOtrosTipos">
            <summary>
            Este test, verifica que al utilizar el método AtaquesPorTipo() de un pokémon, muestre una lista con todos los
            ataques disponibles que tiene para ese tipo de pokémon, ya sean especiales o no, dependiendo del turno.
            Este caso, devolverá que la lista es incorrecta porque se agregó otro tipo que no es el del pokémon seleccionado.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.AgregaAtaquesDelMismoTipoDePokemon">
            <summary>
            Y este caso, la lista es correcta, ya que están todos los ataques disponibles para ese pokémon.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.ObtenerAtaquesDisponibles_SinEspeciales">
            <summary>
            Esta prueba, comprueba que el método ObtenerAtaquesDisponibles() muestra los ataques disponibles dependiendo
            del turno, si ya utilizó un ataque especial debe esperar dos turnos patra volver a utilizarlo. Entonces, si el
            turno es impar los ataques disponibles serán todos menos los especiales.
            </summary>
        </member>
        <member name="M:Tests.PokemonTest.ObtenerAtaquesDisponibles_ConEspeciales">
            <summary>
            Y para esta prueba, verificamos que si el turno es par, muestre todos los ataques disponibles incluyendo los
            ataques especiales.
            </summary>
        </member>
        <member name="M:Tests.AtaqueTest.CalcularDano_AtaqueEspecial">
            <summary>
            Este test, verifica que el método CalcularDano() en la clase Ataque, calcula el daño esperado considerando el
            daño base, el ponderador y la defensa del pokémon enemigo. Al utilizar el método verificamos si dan el mismo
            resultado.
            </summary>
        </member>
        <member name="M:Tests.AtaqueTest.CalcularDano_NoEsEspecial">
            <summary>
            En el caso de que el ataque no sea especial, calculamos sin utilizar el ponderador.
            </summary>
        </member>
        <member name="M:Tests.CatalogosTest.AgregarAtaques_VerificarSiAgregaTodos">
            <summary>
            Esta prueba, verifica que agregue todos los ataques al catálogo de ataques.
            </summary>
        </member>
        <member name="M:Tests.CatalogosTest.AgregarPokemones">
            <summary>
            Este test, verifica que agregue todos los pokémones al catálogo de pokémones.
            </summary>
        </member>
        <member name="M:Tests.CatalogosTest.MostrarCatalogoPokemons_VerificarMuestreTodos">
            <summary>
            Este test, comprueba que el método MostrarCatalogo() de la clase CatalogoPokemons() muestre todos los pokémones
            que hay en el catálogo, los que se han agregado en el método anterior.
            </summary>
        </member>
        <member name="M:Tests.EfectosTest.DormirAplicarEfecto_VerificarEstadoYVidaActual">
            <summary>
            Este test verifica que al aplicar el efecto Dormir el estado del pokémon cambie a "Dormido" y que su vida
            disminuya un 5% en cada turno.
            </summary>
        </member>
        <member name="M:Tests.EfectosTest.EnvenenarAplicarEfecto_VerificarEstadoYVidaActual">
            <summary>
            Este test verifica que el estado del pokémon cambie a Envenenado cuando le apliquen el efecto y que su vida
            disminuya un 5% en cada turno.
            </summary>
        </member>
        <member name="M:Tests.EfectosTest.ParalizarAplicarEfecto_VerificarEstado">
            <summary>
            En esta prueba verificamos el estado del pokémon luego de aplicar el efecto.
            </summary>
        </member>
        <member name="M:Tests.EfectosTest.QuemarAplicarEfecto_VerificarEstado">
            <summary>
            En esta prueba verificamos que el estado del pokémon sea Quemado luego de aplicar el efecto ys u vida disminuya
            un 10% luego de cada turno.
            </summary>
        </member>
    </members>
</doc>
