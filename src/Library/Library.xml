<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Library</name>
    </assembly>
    <members>
        <member name="T:Library.Ataque">
            <summary>
            Esta clase define que tipo de ataque usará el jugador para atacar a otro pokemon. Contiene un valor booleano que define si es especial o no, y a partir de ahí calculará el daño que le realizará al otro personaje.
            La idea de crear esta clase surge por el principio de SRP. Esto se debe a que tiene la responsabilidad de calcular el daño que le ocarionará al oponente.
            </summary>
        </member>
        <member name="M:Library.Ataque.#ctor(System.String,Library.ITipo,System.Double,System.Boolean)">
            <summary>
            Cada ataque al que puede acceder el jugador tiene distinto nombre, distinto valor de daño y si es especial o no.
            </summary>
            <param name="nombre"></param>
            <param name="tipo"></param>
            <param name="dañoBase"></param>
            <param name="esEspecial"></param>
        </member>
        <member name="M:Library.Ataque.CalcularDaño(Library.IPokemon,Library.IPokemon)">
             <summary>
             Recibe como parámetro el pokemon que realizará el ataque (perteneciente a la lista de pokemones del jugador actual)
             como también el pokemon al que atacará (perteneciente al jugador contrario). 
            calcula el daño que causará y luego evalúa si el ataque elegido es especial o no. Toma en cuenta el ponderador del tipo de pokemon definido en ITipo.
             </summary>
        </member>
        <member name="M:Library.BatallaFacade.CambiarPokemon(System.String,System.Int32)">
            <summary>
            Ejecuta el cambio de Pokemon y gestiona el cambio de turno.
            </summary>
            <param name="nombreJugador"></param>
            <param name="indicePokemonACambiar"></param>
        </member>
        <member name="M:Library.BatallaFacade.VerificarFinTurno(Library.JugadorPrincipal)">
            <summary>
            Verificar si se pierde el turno después de una acción
            </summary>
        </member>
        <member name="M:Library.BatallaFacade.BatallaSigue">
            <summary>
            Gestiona el turno actual
            </summary>
        </member>
        <member name="M:Library.BatallaFacade.ListaDeEspera(Library.JugadorPrincipal)">
            <summary>
            Método para unirse a la lista de espera
            </summary>
            <param name="jugador"></param>
            <returns></returns>
        </member>
        <member name="M:Library.BatallaFacade.MostrarListaDeEspera">
            <summary>
            Muestra los jugadores que están en la lista de espera para jugar
            </summary>
        </member>
        <member name="M:Library.BatallaFacade.IniciarBatallaListaDeEspera(System.Random)">
            <summary>
            Se fija si en la lista de espera hay 2 jugadores o más esperando para comenzar una batalla,
            en el caso de que lo haya comienza la batalla entre los dos primeros jugadores de la lista
            y los elimina de la lista de espera. Sino mostrará que no hay jugadores suficientes para iniciar
            una batalla
            </summary>
        </member>
        <member name="T:Library.CatalogoAtaques">
            <summary>
            Esta clase muestra la variedad de ataques disponibles para poder utilizar durante la batalla y el resto del programa.
            Cada ataque es de un tipo de Pokemon y tiene su indice.
            </summary>
        </member>
        <member name="M:Library.CatalogoAtaques.AgregarAtaques">
            <summary>
            Agrega los ataques disponibles del programa en el catálogo.
            </summary>
        </member>
        <member name="T:Library.CatalogoPokemons">
            <summary>
            Catálogo que contiene todos los pokémons que el jugador puede elegir para su equipo
            </summary>
        </member>
        <member name="M:Library.CatalogoPokemons.AgregarPokemons">
            <summary>
            Se agregan al catálogo los pokémons disponibles
            </summary>
            <returns>Pokémons disponibles para que el jugador seleccione</returns>
        </member>
        <member name="M:Library.CatalogoPokemons.MostrarCatalogo">
            <summary>
            Muestra todos los pokémons que hay en el catálogo 
            </summary>
        </member>
        <member name="T:Library.Envenenar">
            <summary>
            De tipo IEfectos, hace que el pokemon atacado pierda 5% de su HP total cada turno. 
            </summary>
        </member>
        <member name="M:Library.Envenenar.AplicarEfecto(Library.IPokemon)">
            <summary>
            El Pokémon puede seguir atacando, pero indica que está "envenenado"
            </summary>
            <param name="objetivo"></param>
        </member>
        <member name="T:Library.Paralizar">
            <summary>
            De tipo IEfectos, hace que el Pokemón objetivo pueda atacar o no aleatoriamente.
            Usa el tipo Random.
            </summary>
        </member>
        <member name="M:Library.Paralizar.PuedeAtacar">
            <summary>
             Si el Pokémon puede atacar o no se determina cuando intenta atacar.
            </summary>
        </member>
        <member name="T:Library.Quemar">
            <summary>
            Este tipo de efecto hace que el pokemón objetivo pierda 10% de su HP cada turno.
            </summary>
        </member>
        <member name="F:Library.Quemar.turnosRestante">
            <summary>
            // Numero de turnos que durara el efecto
            </summary>
        </member>
        <member name="M:Library.Quemar.AplicarDañoPorTurno(Library.IPokemon)">
            <summary>
            Si un Pokémon está quemado perderá el 10% de su HP total cada turno. Resta de a uno los turnos que le queda.
            </summary>
            <param name="objetivo"></param>
        </member>
        <member name="T:Library.IEfectos">
            <summary>
            Por el principio ISP, esta interfaz representa los efectos de Dormir, Paralizar, Envenenar o Quemar que podrán usar los ataques especiales. 
            </summary>
        </member>
        <member name="T:Library.IItem">
            <summary>
            De esta interfaz heredan los items que puede utilizar el pokemon (CuraTotal, Revivir, SuperPocion)
            </summary>
        </member>
        <member name="T:Library.IJugador">
            <summary>
            Esta interfaz define las acciones que el jugador podrá realizar previamente y durante la batalla
            </summary>
        </member>
        <member name="T:Library.IPokemon">
            <summary>
            Esta interfaz define los atributos y métodos de un pokémon
            </summary>
        </member>
        <member name="T:Library.ITipo">
            <summary>
            Esta interfaz define el tipo de pokémon y determina la potencia de los ataques según el tipo de pókemon que será atacado
            </summary>
        </member>
        <member name="M:Library.ITipo.Ponderador(Library.ITipo)">
            <summary>
            Mediante este método, se analiza frente a qué tipos es debil el pokemon y con cuales es fuerte.
            El Ponderador indicará el tamaño del daño que se realizará.
            </summary>
            <param name="tipoOponente"></param>
            <returns></returns>
        </member>
        <member name="T:Library.JugadorPrincipal">
            <summary>
            Esta clase representa al usuario, quien hará uso de los distintos pokemones para su batalla
            </summary>
        </member>
        <member name="M:Library.JugadorPrincipal.ElegirPokemon(System.Int32)">
            <summary>
            Durante la batalla, podrá elegir un pokémon por su índice
            </summary>
            <param name="indice">índice del pokémon elegido para la batalla</param>
            <returns>Pokémon del equipo elegido para la batalla</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Se tira una excepción cuando el índice no entra dentro del rango
            de los integrantes del equipo</exception>
        </member>
        <member name="M:Library.JugadorPrincipal.ElegirAtaque(Library.IPokemon,Library.IPokemon,System.Int32)">
            <summary>
            El pokémon a atacar elige un ataque para 
            </summary>
            <param name="pokemon"></param>
            <param name="enemigo"></param>
            <param name="indiceAtaque"></param>
        </member>
        <member name="M:Library.JugadorPrincipal.MostrarTurno">
            <summary>
            Muestra el turno del pokémon en la batalla
            </summary>
            <returns>Turno actual</returns>
        </member>
        <member name="M:Library.JugadorPrincipal.MostrarCatalogo">
            <summary>
            Muestra el catálogo con todos los pokémones disponibles para formar un equipo
            </summary>
            <param name="catalogo"></param>
        </member>
        <member name="M:Library.JugadorPrincipal.MostrarAtaquesDisponibles(System.Int32)">
            <summary>
            Muestra los ataques disponibles que tiene el pokémon a través de su índice dentro del equipo
            </summary>
            <param name="indice"></param>
        </member>
        <member name="M:Library.JugadorPrincipal.ElegirDelCatalogo(System.Int32)">
            <summary>
            Del catálogo elegir 6 pokémons para agregar a su equipo
            </summary>
            <param name="indice">número de pokémon en la lista del catálogo</param>
        </member>
        <member name="M:Library.JugadorPrincipal.MostrarEquipo">
            <summary>
            Muestra el equipo formado
            </summary>
            <returns>Todos los pokémon del equipo con su nombre y tipo</returns>
        </member>
        <member name="M:Library.JugadorPrincipal.PokemonesDerrotados">
            <summary>
            Verifica si todos los pokemones del equipo están derrotados.
            </summary>
            <returns>True si todos los Pokemones están derrotados, False en caso contrario.</returns>
        </member>
        <member name="M:Library.JugadorPrincipal.CambiarPokemonBatalla(System.Int32)">
            <summary>
            Cambia el pokemon actual por otro del equipo
            </summary>
            <param name="indice">Indice del Pokemon en el equipo</param>
        </member>
        <member name="M:Library.JugadorPrincipal.MostrarInventario">
            <summary>
            Muestra el inventario del jugador
            </summary>
        </member>
        <member name="T:Library.Pokemon">
            <summary>
            Esta clase hereda de la interfaz, define todas las características de los personajes de la batalla.
            </summary>
        </member>
        <member name="M:Library.Pokemon.UsarAtaque(System.Int32,Library.IPokemon,Library.JugadorPrincipal)">
            <summary>
            Realiza un ataque a un pokémon enemigo
            </summary>
            <param name="indiceAtaque"></param>
            <param name="enemigo"></param>
        </member>
        <member name="M:Library.Pokemon.RecibirDaño(System.Double)">
            <summary>
            Recibe daño del pokémon enemigo
            </summary>
            <param name="dano"></param>
        </member>
        <member name="M:Library.Pokemon.MostrarVida">
            <summary>
            Muestra la vida actual sobre la vida total del pokémon
            </summary>
            <returns></returns>
        </member>
        <member name="M:Library.Pokemon.AtaquesPorTipo">
            <summary>
            Agrega cada ataque del catálogo de ataques al tipo de pokemon correspondiente por tipo.
            Esto se asegura de que no haya incongruencia entre los tipos de pokemon y ataque en el juego.
            </summary>
        </member>
        <member name="M:Library.Pokemon.ObtenerAtaquesDisponibles">
            <summary>
            Muestra los ataques disponibles que tiene el pokemon según el turno. A cada 2 turnos, no tiene acceso a los ataques especiales.
            </summary>
            <returns>Devuelve lista de ataques disponibles según partida.</returns>
        </member>
        <member name="T:Library.CuraTotal">
            <summary>
            Item que cura a un Pokemon de efectos de ataques especiales (dormido, paralizado, envenenado o quemado).
            </summary>
        </member>
        <member name="M:Library.CuraTotal.Usar(Library.IPokemon)">
            <summary>
            Metodo para quitar los efectos
            </summary>
            <param name="objetivo">Es el pokemon al que se le quitarán los efectos.</param>
        </member>
        <member name="T:Library.Revivir">
            <summary>
            Este tipo de Item logra que se reviva a un Pokemon con el 50% de su HP total.
            </summary>
        </member>
        <member name="M:Library.Revivir.Usar(System.Double,System.Double)">
            <summary>
            Metodo para quitar los efectos
            </summary>
            <param name="VidaActual"></param>
            <param name="VidaTotal"></param>
            <returns></returns>
        </member>
        <member name="T:Library.SuperPocion">
            <summary>
            Con este tipo de Item, se pueden usar hasta 4 y cada una recupera 70 puntos de HP.
            </summary>
        </member>
        <member name="M:Library.SuperPocion.Usar(System.Double,System.Double)">
            <summary>
            Método para curar, recibe la vida actual y la total del pokemón e intenta reestablecerla.
            </summary>
            <param name="VidaActual"></param>
            <param name="VidaTotal"></param>
            <returns></returns>
        </member>
        <member name="T:Library.Agua">
            <summary>
            Tipo de pokemon, debil contra Electrico y Planta, resistente contra Agua, Fuego y Hielo
            </summary>
        </member>
        <member name="T:Library.Electrico">
            <summary>
            Tipo de Pokemon, débil contra Tierra, inmunne con Electrico.
            </summary>
        </member>
        <member name="T:Library.Fuego">
            <summary>
            Tipo de Pokemon, débil frente a Agua y Tierra, resistente frente a Fuego y Planta
            </summary>
        </member>
        <member name="T:Library.Hielo">
            <summary>
            Tipo de Pokemon, débil contra Fuego, resistente contra Hielo.
            </summary>
        </member>
        <member name="T:Library.Planta">
            <summary>
            Tipo de Pokemon, débil contra Fuego y Hielo, resistente contra Agua, Electrico, Planta y Tierra.
            </summary>
        </member>
        <member name="T:Library.Roca">
            <summary>
            Tipo de Pokemon, indica en su Ponderador frente a cuales es débil, fuerte o inmune para su ataque.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.AttackCommand">
            <summary>
            Esta clase implementa el comando 'attack' del bot. Este comando le
            permite al entrenador usar ataques para dañar al oponente.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.AttackCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'attack'. Este comando permite que el entrenador
            elija un ataque y lo utilice en la partida.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.BattleCommand">
            <summary>
            Esta clase implementa el comando 'battle' del bot. Este comando une al
            jugador que envía el mensaje con el oponente que se recibe como parámetro,
            si lo hubiera, en una batalla; si no se recibe un oponente, lo une con
            cualquiera que esté esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.BattleCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'battle'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.AttacksCatalogueCommand">
            <summary>
            Esta clase implementa el comando 'catalogoataques' del bot. Este comando muestra
            un catálogo de ataques disponibles para utilizar en la batalla.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.AttacksCatalogueCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'catalogoataques'. Este comando muestra la lista de
            ataques disponibles del pokemon en batalla para usar en la misma.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.InventaryItemsCommand">
            <summary>
            Esta clase implementa el comando 'showitems' del bot. Este comando muestra
            un catálogo de items disponibles para utilizar en la batalla.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.InventaryItemsCommand.MostrarItems">
            <summary>
            Implementa el comando 'showitems'. Este comando muestra la lista de
            items disponibles para usar en la batalla.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.PokemonCatalogueCommand">
            <summary>
            Esta clase implementa el comando 'catalogopokemons' del bot. Este comando muestra
            un catálogo de pokemons disponibles para utilizar en la batalla.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.PokemonCatalogueCommand.MostrarCatalogo">
            <summary>
            Implementa el comando 'catalogopokemons'. Este comando muestra la lista de
            pókemons disponibles para usar en la batalla.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.UserInfoCommand">
            <summary>
            Esta clase implementa el comando 'userinfo', alias 'who' o 'whois' del bot.
            Este comando retorna información sobre el usuario que envía el mensaje o sobre
            otro usuario si se incluye como parámetro..
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.UserInfoCommand.ExecuteAsync(System.String)">
            <summary>
            Implementa el comando 'userinfo', alias 'who' o 'whois' del bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord a buscar.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.MostrarVidaCommand">
            <summary>
            Esta clase implementa el comando 'mostrarvida' del bot. Este comando muestra
            los niveles HP del pokemon del equipo (indicado por un índice).
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.MostrarVidaCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'mostrarvida'. Este comando muestra la lista de
            items disponibles para usar en la batalla.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.ShowTurnCommand">
            <summary>
            Esta clase implementa el comando 'mostrarturno' del bot. Este comando le
            permite al entrenador ver si es su turno o no.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.ShowTurnCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'mostrarturno'. Este comando permite que el entrenador
            vea si es su turno o no.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.AddPokemon2TeamCommand">
            <summary>
            Esta clase implementa el comando 'addpokemon2team' del bot. Este comando le permite agregar al
            entrenador hasta 6 pokemons del catálogo de pokemons.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.AddPokemon2TeamCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'addpokemon2team'. Este comando muestra la lista de
            pókemons disponibles para usar en la batalla.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.ChangePokemonCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'cambiarpokemon'. Este comando permite que el entrenador
            cambie el Pokémon actual en batalla por otro de su equipo.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.ChoosePokemonCommand">
            <summary>
            Esta clase implementa el comando 'elegirpokemon' del bot. Este comando le
            permite al entrenador elegir un pokemon de su equipo para usar en la batalla.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.ChoosePokemonCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'elegirpokemon'. Este comando permite que el entrenador
            elija un pokemon de su equipo para usar en batalla.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.ShowTeamCommand">
            <summary>
            Esta clase implementa el comando 'equipo' del bot. Este comando le
            permite al entrenador ver los pokemons de su equipo.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.ShowTeamCommand.MostrarEquipo">
            <summary>
            Implementa el comando 'equipo'. Este comando muestra el equipo
            de pokemones formados por el jugador.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.UseItemCommand.ExecuteAsync(System.Int32)">
            <summary>
            Implementa el comando 'useitem'. Este comando permite que el entrenador
            use un item para atacar al oponente.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.JoinCommand">
            <summary>
            Esta clase implementa el comando 'join' del bot. Este comando une al jugador
            que envía el mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.JoinCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'join'. Este comando une al jugador que envía el
            mensaje a la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.LeaveCommand">
            <summary>
            Esta clase implementa el comando 'leave' del bot. Este comando remueve el
            jugador que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.LeaveCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'leave' del bot. Este comando remueve el jugador
            que envía el mensaje de la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Commands.WaitingCommand">
            <summary>
            Esta clase implementa el comando 'waitinglist' del bot. Este comando muestra
            la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Commands.WaitingCommand.ExecuteAsync">
            <summary>
            Implementa el comando 'waitinglist'. Este comando muestra la lista de
            jugadores esperando para jugar.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Battle">
            <summary>
            Esta clase representa una batalla entre dos jugadores.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Player1">
            <summary>
            Obtiene un valor que representa el primer jugador.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Battle.Player2">
            <summary>
            Obtiene un valor que representa al oponente.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Battle.#ctor(System.String,System.String)">
            <summary>
            Inicializa una instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Battle"/> con los
            valores recibidos como argumento.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.BattlesList">
            <summary>
            Esta clase representa la lista de batallas en curso.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.BattlesList.AddBattle(System.String,System.String)">
            <summary>
            Crea una nueva batalla entre dos jugadores.
            </summary>
            <param name="player1">El primer jugador.</param>
            <param name="player2">El oponente.</param>
            <returns>La batalla creada.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Facade">
            <summary>
            Esta clase recibe las acciones y devuelve los resultados que permiten
            implementar las historias de usuario.
            Acá se crean los jugadores, se les agregan los pokemones y los ataques respectivamente.
            Además, llama a las funciones necesarias para poder realizar ataques entre jugadores.
            Otras clases que implementan el bot usan esta <see cref="T:Ucu.Poo.DiscordBot.Domain.Facade"/> pero no conocen el resto de las clases del
            dominio. Esta clase es un singleton.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.#ctor">
            <summary>
            Este constructor privado impide que otras clases puedan crear instancias de esta.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Facade.Instance">
            <summary>
            Obtiene la única instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Facade"/>.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.Reset">
            <summary>
            Inicializa este singleton. Es necesario solo en los tests.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.AddTrainerToWaitingList(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre del jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.RemoveTrainerFromWaitingList(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El jugador a remover.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.GetAllTrainersWaiting">
            <summary>
            Obtiene la lista de jugadores esperando.
            </summary>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.TrainerIsWaiting(System.String)">
            <summary>
            Determina si un jugador está esperando para jugar.
            </summary>
            <param name="displayName">El jugador.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Facade.StartBattle(System.String,System.String)">
            <summary>
            Crea una batalla entre dos jugadores.
            </summary>
            <param name="playerDisplayName">El primer jugador.</param>
            <param name="opponentDisplayName">El oponente.</param>
            <returns>Un mensaje con el resultado.</returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.Trainer">
            <summary>
            Esta clase representa un jugador en el juego Pokémon.
            </summary>
        </member>
        <member name="P:Ucu.Poo.DiscordBot.Domain.Trainer.DisplayName">
            <summary>
            El nombre de usuario de Discord en el servidor del bot del jugador.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.Trainer.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Ucu.Poo.DiscordBot.Domain.Trainer"/> con el
            nombre de usuario de Discord que se recibe como argumento.
            </summary>
            <param name="displayName">El nombre de usuario de Discord.</param>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Domain.WaitingList">
            <summary>
            Esta clase representa la lista de jugadores esperando para jugar.
            </summary>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.AddTrainer(System.String)">
            <summary>
            Agrega un jugador a la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a agregar.
            </param>
            <returns><c>true</c> si se agrega el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.RemoveTrainer(System.String)">
            <summary>
            Remueve un jugador de la lista de espera.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a remover.
            </param>
            <returns><c>true</c> si se remueve el usuario; <c>false</c> en caso
            contrario.</returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.FindTrainerByDisplayName(System.String)">
            <summary>
            Busca un jugador por el nombre de usuario de Discord en el servidor del
            bot.
            </summary>
            <param name="displayName">El nombre de usuario de Discord en el servidor
            del bot a buscar.
            </param>
            <returns>El jugador encontrado o <c>null</c> en caso contrario.
            </returns>
        </member>
        <member name="M:Ucu.Poo.DiscordBot.Domain.WaitingList.GetAnyoneWaiting">
            <summary>
            Retorna un jugador cualquiera esperando para jugar. En esta
            implementación provista no es cualquiera, sino el primero. En la
            implementación definitiva, debería ser uno aleatorio.
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.Bot">
            <summary>
            Esta clase implementa el bot de Discord.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.BotLoader">
            <summary>
            Esta clase ejecuta el bot de Discord hasta que en la terminal donde se
            ejecuta el bot se oprime la tecla 'Q'.
            </summary>
        </member>
        <member name="T:Ucu.Poo.DiscordBot.Services.IBot">
            <summary>
            La interfaz del Bot de Discord para usar con inyección de dependencias.
            </summary>
        </member>
        <member name="F:AplicarDaño.turnosRestante">
            <summary>
            Numero de turnos que durará el efecto
            </summary>
        </member>
        <member name="M:AplicarDaño.AplicarDañoPorTurno(Library.IPokemon)">
            <summary>
            La cantidad de turnos que está dormido el Pokémon se determina cuando recibe el ataque.
            </summary>
        </member>
        <member name="T:Dormir">
            <summary>
            Implementa el tipo IEfectos, este efecto hace que el pokémon enemigo esté dormido por un número aleatorio
            de turnos y no atacará.
            </summary>
        </member>
        <member name="M:Dormir.#ctor">
            <summary>
            Determina aleatoriamente cuantos turnos estará dormido el enemigo (entre 1 y 4)
            </summary>
        </member>
        <member name="M:Dormir.AplicarEfecto(Library.IPokemon)">
            <summary>
            Si el pokémon está dormido no atacará
            </summary>
        </member>
    </members>
</doc>
